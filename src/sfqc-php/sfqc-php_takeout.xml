  <function name="wrap_sfq_takeout" role="public">
    <proto>int wrap_sfq_takeout(string querootdir, string quename, array ioparam, string takeoutfunc)</proto>
    <summary>libsfq:sfq_takeout() wrapper</summary>
    <code><?data
// start
	zval** entry = NULL;

	int takeout_rc = SFQ_RC_UNKNOWN;
	struct sfq_value val;

/* init */
	bzero(&val, sizeof(val));

	if (strcmp(takeoutfunc, "sfq_shift") == 0)
	{
		takeout_rc = sfq_shift(querootdir, quename, &val);
	}
	else if (strcmp(takeoutfunc, "sfq_pop") == 0)
	{
		takeout_rc = sfq_pop(querootdir, quename, &val);
	}

	if (takeout_rc == SFQ_RC_SUCCESS)
	{
/*
取り出した val を連想配列にコピー
*/
		char uuid_s[36 + 1] = "";
		uuid_unparse(val.uuid, uuid_s);

	// id
		SFQWL_ZH_UPDATE_LONG(ioparam_hash, "id", val.id);

	// pushtime
		SFQWL_ZH_UPDATE_LONG(ioparam_hash, "pushtime", val.pushtime);

	// uuid
		SFQWL_ZH_UPDATE_STRING(ioparam_hash, "uuid", uuid_s);

	// eworkdir
		SFQWL_ZH_UPDATE_STRING(ioparam_hash, "eworkdir", val.eworkdir);

	// execpath
		SFQWL_ZH_UPDATE_STRING(ioparam_hash, "execpath", val.execpath);

	// execargs
		SFQWL_ZH_UPDATE_STRING(ioparam_hash, "execargs", val.execargs);

	// metatext
		SFQWL_ZH_UPDATE_STRING(ioparam_hash, "metatext", val.metatext);

	// soutpath
		SFQWL_ZH_UPDATE_STRING(ioparam_hash, "soutpath", val.soutpath);

	// serrpath
		SFQWL_ZH_UPDATE_STRING(ioparam_hash, "serrpath", val.serrpath);

	// payload_type
		if (val.payload_type & SFQ_PLT_CHARARRAY)
		{
			SFQWL_ZH_UPDATE_STRING(ioparam_hash, "payload_type", "text");
		}
		else if (val.payload_type & SFQ_PLT_BINARY)
		{
			SFQWL_ZH_UPDATE_STRING(ioparam_hash, "payload_type", "binary");
		}

	// payload_size
		SFQWL_ZH_UPDATE_LONG(ioparam_hash, "payload_size", val.payload_size);

	// payload
		SFQWL_ZH_UPDATE_BINARY(ioparam_hash, "payload", val.payload, val.payload_size);
	}

	sfq_free_value(&val);

	RETURN_LONG(takeout_rc);
// end
    ?></code>

    <test>
      <code><?data
$ioparam = [ ];
echo wrap_sfq_takeout(null, null, $ioparam, 'sfq_pop');
      ?></code>
      <result mode="plain"><?data
0
      ?></result>
    </test>
  </function>

